program  ::= (("export")? (expression | variable)) ";"*
expression
         ::= (const | path | variableGet) ("," manipulation)*

/* Variables */
variable ::= var ([a-fA-F]+) "=" (expression | path | const)
variableGet ::= [a-fA-F]+

/* Manipulations */
manipulation
         ::= analogous
           | compliment
           | rotate
           | scale
analogous
         ::= "analogous" range
compliment
         ::= "compliment"
range    ::= '-'? [0-9]+ ("." [0-9]+)?

/* Constants */
const    ::= '(' ( rgb | hex | hsl ) ')'
rgb      ::= 'rgb(' colourValue ',' colourValue ',' colourValue ')'
hsl      ::= 'hsl(' [0-9]+ ',' [0-1]+ (.[0-9])? ',' [0-1]+ (.[0-9])? ')'
hex      ::= '#'? hexit hexit hexit ( hexit hexit )?
hexit    ::= [0-9a-fA-F]
colourValue
         ::= ( [1-9] | '1' [0-9] | '2' [0-4] )? [0-9]
           | '25' [0-5]

/* Pathing */
path     ::= "[" expression ("," expression)* "]"
rotate   ::= "rotate" range
scale    ::= "scale" range
